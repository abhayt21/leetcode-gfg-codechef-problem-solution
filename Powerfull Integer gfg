class Solution { 
    
    public static int powerfullInteger(int n,int interval[][],int k)
    { 
        
        HashMap<Integer, Integer> map = new HashMap<>();
        int max = 0;
        for(int i=0; i<n; i++){
            map.put(interval[i][0], map.getOrDefault(interval[i][0],0)+1);
            map.put(interval[i][1]+1, map.getOrDefault(interval[i][1]+1,0)-1);
            max = Math.max(max, interval[i][1]);
        } 
        
        int [] freq = new int[max+2];
       
        for(Map.Entry<Integer, Integer> entry: map.entrySet()){
            freq[entry.getKey()] = entry.getValue();
        }
        
        
        for(int i=1; i<freq.length; i++) freq[i] += freq[i-1];
        int pow = -1;
        for(int i=0; i<freq.length; i++){
            if(freq[i] >= k){
                pow = Math.max(pow, i);
            } 
        }
        return pow;
    }
}

